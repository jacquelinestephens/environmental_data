# X values are uniformly distributed
x_random = runif(n = n_pts, min = x_min, max = x_max)
# Y values are normally-distributed.
# I used the default parameters for mean and sd.
y_random = rnorm(n = n_pts)
dat_random = data.frame(x = x_random, y = y_random)
plot(y ~ x, data = dat_random, pch = 8)
n_pts = 20
x_min = 1
x_max = 10
# X values are uniformly distributed
x_random = runif(n = n_pts, min = x_min, max = x_max)
# Y values are normally-distributed.
# I used the default parameters for mean and sd.
y_random = rnorm(n = n_pts)
dat_random = data.frame(x = x_random, y = y_random)
plot(y ~ x, data = dat_random, pch = 8)
plot(y ~ x, data = dat_random, pch = 4)
plot(y ~ x, data = dat_random, pch = 10)
set.seed(1)
dat_unif_1 = runif(n = 270, min = 0, max = 4)
set.seed(1)
dat_unif_2 = runif(n = 270, min = 0, max = 4)
par(mfrow = c(1, 2))
hist(dat_unif_1)
hist(dat_unif_2)
boxplot(y ~ x, data = dat_random, pch = 10)
?boxplot()
boxplot(x_random)
boxplot(x_random, y_random)
plot(y ~ x, data = dat_random, pch = 10)
plot(y ~ x, data = dat_random, pch = 10, col = "red")
boxplot(x_random, y_random, col = "blue")
n_pts = 50
x_min = 1
x_max = 20
# X values are uniformly distributed
x_random = runif(n = n_pts, min = x_min, max = x_max)
# Y values are normally-distributed.
# I used the default parameters for mean and sd.
y_random = rnorm(n = n_pts)
dat_random = data.frame(x = x_random, y = y_random)
plot(y ~ x, data = dat_random, pch = 10, col = "red")
?boxplot()
boxplot(x_random, y_random, col = "blue")
set.seed(1)
dat_unif_1 = runif(n = 270, min = 0, max = 4)
set.seed(1)
dat_unif_2 = runif(n = 270, min = 0, max = 4)
par(mfrow = c(1, 2))
hist(dat_unif_1)
hist(dat_unif_2)
set.seed(1)
dat_unif_1 = runif(n = 150, min = 0, max = 10)
set.seed(1)
dat_unif_2 = runif(n = 20, min = 0, max = 8)
par(mfrow = c(2, 2))
plot(y ~ x, data = dat_random, pch = 10, col = "red")
boxplot(x_random, y_random, col = "blue")
hist()
hist(dat_unif_1)
hist(dat_unif_2)
hist(dat_unif_1, adjustcolor("red"))
hist(dat_unif_2)
hist(dat_unif_1, adjustcolor(col = "yellow"))
hist(dat_unif_2)
hist(dat_unif_1, adjustcolor(col = "yellow"))
hist(dat_unif_1, rbg("yellow"))
hist(dat_unif_2)
?rbg()
?rgb()
hist(dat_unif_1, rgb(green = 0:5))
hist(dat_unif_2)
hist(dat_unif_1, rgb(red, green, blue, alpha, names = NULL, maxColorValue = 1))
hist(dat_unif_1,
rgb("red", "green", "blue", alpha, names = NULL, maxColorValue = 1))
hist(dat_unif_1,
rgb("red", "green", "blue", alpha, names = NULL, maxColorValue = 10))
rgb("red", "green", "blue", "alpha, names = NULL, maxColorValue = 10))
hist(dat_unif_1,
hist(dat_unif_2)
hist(dat_unif_1, rgb("red", "green", "blue", "alpha, names = NULL, maxColorValue = 10))
hist(dat_unif_1, col = "steelblue")
hist(dat_unif_2, col = "green", adjustcolor(transform = ))
hist(dat_unif_2, col = "green")
dat_random = data.frame(x = x_random, y = y_random)
set.seed(1)
dat_unif_1 = runif(n = 150, min = 0, max = 10)
set.seed(1)
dat_unif_2 = runif(n = 20, min = 0, max = 8)
par(mfrow = c(2, 2))
plot(y ~ x, data = dat_random, pch = 10, col = "red")
boxplot(x_random, y_random, col = "blue")
hist()
hist(dat_unif_1, col = "steelblue")
hist(dat_unif_2, col = "green")
plot(y ~ x, data = dat_random, pch = 10, col = "red", main = "Scatterplot")
boxplot(x_random, y_random, col = "blue")
boxplot(x_random, y_random, col = "blue", main = "Boxplot")
hist()
hist(dat_unif_1, col = "steelblue")
hist(dat_unif_2, col = "green")
plot(y ~ x, data = dat_random, pch = 10, col = "red", main = "Scatterplot")
boxplot(x_random, y_random, col = "blue", main = "Boxplot")
hist()
hist(dat_unif_1, col = "steelblue")
hist(dat_unif_2, col = "green")
?rgb()
plot(y ~ x, data = dat_random, pch = 10, col = "red", main = "Scatterplot")
boxplot(x_random, y_random, col = "blue", main = "Boxplot")
hist()
hist(dat_unif_1, col = "yellow")
plot(dat_unif_2, col = "green")
plot(dat_unif_2, col = "green", pch = 4, main = "Scatterplot Green")
plot(y ~ x, data = dat_random, pch = 10, col = "red", main = "Scatterplot Red")
par(mfrow = c(2, 2))
plot(y ~ x, data = dat_random, pch = 10, col = "red", main = "Scatterplot Red")
boxplot(x_random, y_random, col = "blue", main = "Boxplot")
hist(dat_unif_1, col = "yellow")
plot(dat_unif_2, col = "green", pch = 4, main = "Scatterplot Green")
# Y values are normally-distributed.
# I used the default parameters for mean and sd.
y_random = rnorm(n = n_pts, min = 0, max = 20)
dat_random = data.frame(x = x_random, y = y_random)
set.seed(1)
dat_unif_1 = runif(n = 150, min = 0, max = 10)
set.seed(1)
dat_unif_2 = runif(n = 50, min = 0, max = 8)
par(mfrow = c(2, 2))
plot(y ~ x, data = dat_random, pch = 10, col = "red", main = "Scatterplot Red")
boxplot(x_random, y_random, col = "blue", main = "Boxplot")
hist(dat_unif_1, col = "yellow")
plot(dat_unif_2, col = "green", pch = 4, main = "Scatterplot Green")
svg(filename = "4random_plots.svg", width = 7, height = 7)
par(mfrow = c(2, 2))
plot(y ~ x, data = dat_random, pch = 10, col = "red", main = "Scatterplot Red")
boxplot(x_random, y_random, col = "blue", main = "Boxplot")
hist(dat_unif_1, col = "yellow")
plot(dat_unif_2, col = "green", pch = 4, main = "Scatterplot Green")
dev.off()
#Question 11-12
set.seed(1)
random = runif(n = 50, min = 0, max = 8)
#Question 11-12
set.seed(1)
random = runif(n = 50, min = 0, max = 8)
plot(random, col = "green", pch = 4, main = "Scatterplot Green")
#Question 11-12
par(mfrow = c(1))
set.seed(1)
random = runif(n = 50, min = 0, max = 8)
plot(random, col = "green", pch = 4, main = "Scatterplot Green")
#Question 11-12
par(mfrow = c(1,1))
set.seed(1)
random = runif(n = 50, min = 0, max = 8)
plot(random, col = "green", pch = 4, main = "Scatterplot Green")
#Question 11-12
par(mfrow = c(1,1))
set.seed(1)
random = runif(n = 50, min = 0, max = 8)
guess_x = 6
guess_y = 0
guess_slope = 0.1
plot(random, col = "green", pch = 4, main = "Scatterplot Green")
curve(line_point_slope(x, guess_x, guess_y, guess_slope), add = T)
line_point_slope = function(x, x1, y1, slope)
{
get_y_intercept =
function(x1, y1, slope)
return(-(x1 * slope) + y1)
linear =
function(x, yint, slope)
return(yint + x * slope)
return(linear(x, get_y_intercept(x1, y1, slope), slope))
}
#Question 11-12
par(mfrow = c(1,1))
set.seed(1)
random = runif(n = 50, min = 0, max = 8)
guess_x = 6
guess_y = 0
guess_slope = 0.1
plot(random, col = "green", pch = 4, main = "Scatterplot Green")
curve(line_point_slope(x, guess_x, guess_y, guess_slope), add = T)
guess_slope = 0.5
plot(random, col = "green", pch = 4, main = "Scatterplot Green")
curve(line_point_slope(x, guess_x, guess_y, guess_slope), add = T)
guess_slope = 0.1
plot(random, col = "green", pch = 4, main = "Scatterplot Green")
curve(line_point_slope(x, guess_x, guess_y, guess_slope), add = T)
guess_x = 0
guess_y = 0
guess_slope = 0.1
plot(random, col = "green", pch = 4, main = "Scatterplot Green")
curve(line_point_slope(x, guess_x, guess_y, guess_slope), add = T)
guess_slope = 0.15
plot(random, col = "green", pch = 4, main = "Scatterplot Green")
curve(line_point_slope(x, guess_x, guess_y, guess_slope), add = T)
random = runif(n = 50, min = 0, max = 8)
guess_x = 0
guess_y = 0
guess_slope = 0.15
plot(random, col = "green", pch = 4, main = "Scatterplot Green")
curve(line_point_slope(x, guess_x, guess_y, guess_slope), add = T)
set.seed(1)
random = runif(n = 50, min = 0, max = 8)
guess_x = 0
guess_y = 0
guess_slope = 0.15
plot(random, col = "green", pch = 4, main = "Scatterplot Green")
curve(line_point_slope(x, guess_x, guess_y, guess_slope), add = T)
#Question 11-12
svg(filename = "random_GreenSP.svg", width = 7, height = 7)
par(mfrow = c(1,1))
set.seed(1)
random = runif(n = 50, min = 0, max = 8)
guess_x = 0
guess_y = 0
guess_slope = 0.15
plot(random, col = "green", pch = 4, main = "Scatterplot Green")
curve(line_point_slope(x, guess_x, guess_y, guess_slope), add = T)
dev.off()
line_point_slope(random, guess_x, guess_y, guess_slope)
plot(random, col = "green", pch = 4, main = "Scatterplot Green")
y_predicted = line_point_slope(random, guess_x, guess_y, guess_slope)
random_new = cbind(random,y_predicted)
resids = col(random)-col(y_predicted)
View(random_new)
resids = col(random - y_predicted)
random_new$resids = random_new$random - random_new$y_predicted
random_new$resids =
c(random_new$random - random_new$y_predicted)
random_new$resids= cbind(random_new$random - random_new$y_predicted)
random_new$resids= c(random_new$random - random_new$y_predicted)
random_new$resids= c(random - random_new$y_predicted)
random_new$resids= c(random -y_predicted)
resids = col(random - y_predicted)
y_predicted = line_point_slope(random, guess_x, guess_y, guess_slope)
random_new = cbind(random,y_predicted)
resids = cbind(random - y_predicted)
random_final = cbind(random,y_predicted, resids)
View(random_final)
random_final = cbind(random,y_predicted, "resids")
View(random_final)
colnames(,,"resids")
"resids" = cbind(random - y_predicted)
random_final = cbind(random,y_predicted, "resids")
View(random_final)
resids = cbind(random - y_predicted)
random_final = cbind(random,y_predicted, "resids")
View(random_final)
View(random_new)
resids = cbind(random - y_predicted)
random_final = cbind(random,y_predicted, "resids")
View(random_final)
random_final$resids = cbind(random - y_predicted)
random_final = cbind(random,y_predicted, "resids")
View(random_final)
resids = cbind(random - y_predicted)
random_final = cbind(random,y_predicted, "resids")
View(random_final)
random_final = cbind(random,y_predicted, resids)
View(random_final)
colnames(random_final) = c("Random", "Predicted", "Resids")
sum(random_final$resids)
sum(random_final$"Resids")
sum(random_final$resids)
sum(random_final[resids])
abs(random_final[resids])
sum(abs(random_final[resids]))
hist(random[resids])
hist(random[resids], main = "Histogram of Residual Values",
xlab = "Residuals")
plot(random_final[y_predicted], random_final[resids],
main = "Relationship between Predicted Values and Residuals",
xlab = "Predicted", ylab = "Residual")
plot(y_predicted,resids,
main = "Relationship between Predicted Values and Residuals",
xlab = "Predicted", ylab = "Residual")
plot(y_predicted,resids,
main = "Relationship between Predicted and Residuals",
xlab = "Predicted", ylab = "Residual")
#lab 9 Modeling Data 2
require(here)
catrate = read.csv(here("data", "catrate.csv"))
head(catrate)
#How likely is a response of 33/61 if the reproductive success
#and failure are equally likely, i.e., Pr(success)=0.5?
#specify the number of successes (33) and total sample size (61)
n_success = sum(catrate$success)
n_years = sum(catrate$years)
binom.test(
x = n_success,
n = n_years,
p = 0.5)
late_fill_rate = 2/7
normal_fill_rate = 1 - late_fill_rate
binom.test(
x = n_success,
n = n_years,
p = normal_fill_rate)
binom.test(
x = n_success,
n = n_years,
p = normal_fill_rate,
alternative ='less')
#Comparison with one-sample tests
t.test(catrate$cat.rate, mu = 2/7)
#F-distribution ex: vegetation data: seedling response to understory veg treatments
#4 treatments randomly assigned to 32 plots in a randomized block design
veg = read.csv(here("data", "vegdata.csv"))
head(veg)
boxplot(pine ~ treatment, data = veg)
#Variance Test: to test variance between pine seedling count differs between control and clipped
veg2 = droplevels(
subset(
veg,
treatment %in% c('control','clipped')
))
# verify that treatment is factorized
veg2$treatment = factor(veg2$treatment)
var.test(
pine ~ treatment,
data = veg2)
#F-tests assumes normality for unequal variances
#test for normality using the shapiro.test, have to select one sample because shapiro is one sample test
shapiro.test(veg2$pine[veg2$treatment=="control"])
shapiro.test(veg2$pine[veg2$treatment=="clipped"])
#Non-parametric Variance test: if data is non-normal, use Fligner-Killen test
fligner.test(
pine ~ treatment,
data = veg2)
#tests for multiple variances: n-sample parametric test Bartlett's test
#tests for homogeneity of variances amount all four treatment levels
bartlett.test(pine~treatment, data = veg)
fligner.test(pine ~ treatment, data = veg)
t.test(
pine ~ treatment,
data = veg2)
#Wilcox Test rank sum is appropriate when the samples are independent, but errors are not normally dist
wilcox.test(
pine ~ treatment,
data = veg2)
install.packages("datarium")
require(datarium)
data("mice2")
head(mice2)
t.test(mice2$before, mice2$after, paired = TRUE)
#check for normality assumptions to verify t test is appropiate
shapiro.test(mice2$before)
shapiro.test(mice2$after)
wilcox.test(mice2$before, mice2$after, paired = TRUE)
#now compared to unpaired test
t.test(mice2$before, mice2$after, paired = FALSE)
#question: whether dispersal rates for first time breeders and experienced are correlated
require(here)
disp = read.csv(here("data", "dispersal.csv"))
disp
plot(
disp.rate.ftb ~ disp.rate.eb,
data = disp,
main = "Marbled Salamander Dispersal Rates",
xlab = "Dispersal Rate\nFirst Time Breeders",
ylab = "Dispersal Rate\nExperienced Breeders",
pch = 21, col = 1, bg = "steelblue")
cor.test(
disp$disp.rate.ftb,
disp$disp.rate.eb,
use='complete.obs')
cor.test(
disp$disp.rate.ftb,
disp$disp.rate.eb,
use='complete.obs',
method='spearman')
plot(
ecdf(disp$disp.rate.ftb),
verticals=TRUE,
main = "Mike's Plot of Marbled Salamanders\nFirst-Time Breeders: ECDF")
plot(
ecdf(disp$disp.rate.ftb),
verticals=TRUE,
main = "Mike's Plot of Marbled Salamanders\nFirst-Time and Experienced Breeders: ECDF")
plot(
ecdf(disp$disp.rate.eb),
verticals=TRUE,
lty=3,
add=TRUE)
legend(
x = 0.4, y = 0.4,
lty = c(1, 3),
legend = c("first-time", "experienced"),
title = "Breeder Class")
#are the two dist different? use ks.test
ks.test(disp$disp.rate.ftb,disp$disp.rate.eb)
prop.test(
x = c(4,16),
n = c(40,250))
prop.test(
x = c(8,32),
n = c(80,500))
owls = matrix(c(16, 9, 4, 11), nrow=2)
rownames(owls) = c("present", "absent")
colnames(owls) = c("old", "young")
chisq_owls = chisq.test(owls)
chisq_owls
round(chisq_owls$expected,1) #expected values
chisq_owls$observed #observed values
#Chi-Square Residuals
#calculate residuals = difference between observed and expected values
round(
chisq_owls$observed - chisq_owls$expected,
digits = 1)
fisher.test(owls)
#read in the bird and habitat data and merged them into a single file based on the common fields.
birds   = read.csv(here("data", "bird.sta.csv"))
hab     = read.csv(here("data", "hab.sta.csv"))
birdhab = merge(
birds,
hab, by=c("basin", "sub", "sta"))
#Create a contingency table for edge/interior and brown creeper presence/absence
table(
birdhab$s.edge,
birdhab$BRCR > 0)
# set the presence to be in the first column
br_creeper_table = table(
birdhab$s.edge,
birdhab$BRCR > 0)[, 2:1]
br_creeper_table
#QUestion 1 through 2
BRCR_table = matrix(c(29, 144, 314, 559), nrow=2)
rownames(BRCR_table) = c("present", "absent")
colnames(BRCR_table) = c("Edges", "Interior")
BRCR_table
chisq_BRCR = chisq.test(BRCR_table)
chisq_BRCR
round(chisq_BRCR$expected, 1) #expected values
chisq_BRCR$observed #observed values
round(chisq_BRCR$observed - chisq_BRCR$expected, digits = 1)
#Question 3
require(palmerpenguins)
head(penguins)
fit_species = lm(formula = body_mass_g ~ species,data = penguins)
#Question 4
fit_sex = lm(formula = body_mass_g ~ sex, data = penguins)
#Question 5
fit_both = lm(formula = body_mass_g ~ species*sex,data = penguins)
#Question 6
boxplot(formula = body_mass_g ~ species,data = penguins,
main = "Conditional Boxplot for Body Mass by Species",
xlab = "Species", ylab = "Body Mass (grams)")
#Question 7
boxplot(formula = body_mass_g ~ sex, data = penguins,
main = "Conditional Boxplot for Body Mass by Sex",
xlab = "Sex", ylab = "Body Mass (grams)")
#Question 8
boxplot(formula = body_mass_g ~ species*sex,data = penguins,
main = "Double Conditional Boxplot for \n Body Mass by Sex and Species",
xlab = "", ylab = "Body Mass (grams)",
names = c("Adelie\n female", "Adelie\n male", "Chinstrap\n female", "Chinstrap\n male", "Gentoo\n female", "Gentoo\n male"),
las = 2)
#Question 11
bartlett.test(body_mass_g ~ species,data = penguins)
#Question 12
bartlett.test(body_mass_g ~ sex,data = penguins)
#Question 13
dat_ss = aggregate(
body_mass_g ~ sex*species,
data = penguins,
FUN = c)
str(dat_ss)
?bartlett.test
bartlett.test(dat_ss$body_mass_g)
#Question 15
require(here)
FLtrees = read.csv(here("data", "trees_FL.csv"))
dat_fl = data.frame(FLtrees)
head(dat_fl)
barplot(table(dat_fl$ProbabilityofFailure),
main = "Probability of Failure",
xlab = "Failure Class")
barplot(table(dat_fl$Failure_Standardized),
main = "Standardized Failure")
hist(dat_fl$DBH_in, xlab = "DBH (inches)",
main = "Histogram of DBH")
plot(dat_fl$DBH_in, dat_fl$HeighttoTop_ft, main = "Scatterplot of Relationship between \n DBH and Height of Trees",
xlab = "DBH (inches)", ylab = "Height (feet)")
#intact and whole trees
dat_none = droplevels(subset(dat_fl, Failure_Standardized == "none"))
dat_branch = droplevels(subset(dat_fl, Failure_Standardized == "branch"))
dat_whole = droplevels(subset(dat_fl, Failure_Standardized == "whole"))
ks.test(dat_none$DBH_in, dat_whole$DBH_in)
#Question 20
#linear
cor.test(dat_fl$DBH_in, dat_fl$HeighttoTop_ft,use = 'comlete.obs')
#if curved and does not come from a bivariate normal distribution
cor.test(
dat_fl$DBH_in, dat_fl$HeighttoTop_ft,
use='complete.obs',
method='spearman')
#Question 21
dat_fl$fail = factor(dat_fl$Failure_Standardized != "none")
levels(dat_fl$fail) = c("No Fail", "Fail")
fl_table_2 = table(
dat_fl$ProbabilityofFailure,
dat_fl$fail)
fl_table_2
chisq_fl_table_2 = chisq.test(fl_table_2)
chisq_fl_table_2
round(chisq_fl_table_2$expected, 1) #expected values
chisq_fl_table_2$observed #observed values
round(chisq_fl_table_2$observed - chisq_fl_table_2$expected, digits = 0)

main = "Ginkgo Petiole Length",
ylab = "Petiole Length (mm)")
ginkgo = read.csv(here("data","ginkgo_data_2021.csv"))
require(here)#checks first if it is already loaded (less time intensive)
ginkgo = read.csv(here("data","ginkgo_data_2021.csv"))
#here() calls out where to get the file using quotation marks as well as the .csv at the end
#read.csv() reads the file into a data.frame
#setting it equal to ginkgo= gives the data frame a name
## Create a vector of numbers
num_vec  = c(1, 4, 8, 9, 13,17)
## Create a vector of characters
char_vec = c("a", "fish", "data is cool")
#have to put the character elements in quotation marks
#both typing the name of the vector into the console as well as using the print() prints the contents
num_vec
print(num_vec)
char_vec
print(char_vec)
length(num_vec)#length or count of elements in the vector
length(char_vec)#length or count of elements in the vector
#creating a matrix from the vector of numbers
print(num_vec)
num_vec_matrix1 = matrix(num_vec, nrow = 2, ncol = 3,
byrow = TRUE,
dimnames = list(c("R1","R2"), c("C1","C2","C3")))
num_vec_matrix2 = matrix(num_vec, nrow = 2, ncol = 3,
byrow = FALSE,
dimnames = list(c("R1","R2"),c("C1","C2","C3")))
print(num_vec_matrix1)
print(num_vec_matrix2)
#after printing both, you can see that the byrow= argument controls whether elements will be listed vertically (TRUE) or horizontally (FALSE)
#dimnames = names both your rows and columns
#creates data frames of vectors of same lengths
num_vec1 = c(5,6,10,6,3,9,8,5)
num_vec2 = rep(1:2, 4)#repeat 1 to 2 four times
length(num_vec1)
length(num_vec2)
data.frame(num_vec1,num_vec2)
nrow(ginkgo)#number of rows or observations
ncol(ginkgo)#number of columns
dim(ginkgo)#dimensions of the data frame: rows columns
# use the $ to select a specific column of the data frame
notch_depth = ginkgo$notch_depth
#use [] to subset by position within the data frame
ginkgo[1]#calls out the first entire column
ginkgo[2,3]#first number selects the row, second number selects the column
ginkgo[3]#calls out the third entire column
ginkgo[1,]#calls out the entire row of the first observation
#use subset() to create a data frame of just adelie species
dat_adelie = subset(penguins, species == "Adelie")
#subset(data frame, column name == "specific value")
#the summary() function will give you the minimum, median, mean, maximum, and 1st and 3rd quantile values of each column
summary(ginkgo)
#because seeds_present was a character value it counts the total FALSE and TRUEs present
summary(penguins)
#the mean() function only accepts numeric or logical values
mean(ginkgo$max_width, na.rm = TRUE)
mean(penguins$body_mass_g, na.rm = TRUE) #adding the na.rm = argument may be necessary if your column contains NAs
#should missing values be removed?
#the standard deviation function
sd(ginkgo$max_width, na.rm = TRUE)
sd(penguins$body_mass_g,na.rm = TRUE)
plot(x = ginkgo$max_depth,y = ginkgo$max_width,
main = "Maximum Leaf Depth by Leaf Width In Ginkgos",
xlab = "Maximum Leaf Depth",
ylab = "Maximum Leaf Width",
ylim = c(10, 150),
xlim = c(10,150),
pch = 1, cex = 0.5, col = "green")
plot(x = ginkgo$max_depth,y = ginkgo$max_width,
main = "Maximum Leaf Depth by Leaf Width In Ginkgos"#the main title of the graph,
xlab = "Maximum Leaf Depth",
par(mfrow = c(2, 2))
boxplot(ginkgo$petiole_length,
main = "Ginkgo Petiole Length",
ylab = "Petiole Length (mm)")
boxplot(ginkgo$max_width,
main = "Ginkgo Max Width",
ylab = "Max Width (mm)")
boxplot(ginkgo$petiole_length ~ ginkgo$seeds_present,
main = "Petiole Length Conditioned By Seed Presence",
xlab = "Seed Present",
ylab = "Max Width (mm)")
boxplot(ginkgo$max_width ~ ginkgo$seeds_present,
main = "Max Width Conditioned By Seed Presence",
xlab = "Seed Present",
ylab = "Max Width (mm)")
par(mfrow = c(2, 2))
boxplot(ginkgo$petiole_length,
main = "Ginkgo Petiole Length",
ylab = "Petiole Length (mm)")
boxplot(ginkgo$petiole_length ~ ginkgo$seeds_present,
main = "Petiole Length Conditioned By Seed Presence",
xlab = "Seed Present",
ylab = "Max Width (mm)")
boxplot(ginkgo$max_width,
main = "Ginkgo Max Width",
ylab = "Max Width (mm)")
boxplot(ginkgo$max_width ~ ginkgo$seeds_present,
main = "Max Width Conditioned By Seed Presence",
xlab = "Seed Present",
ylab = "Max Width (mm)")
boxplot(ginkgo$petiole_length ~ ginkgo$seeds_present,
main = "Petiole Length Conditioned By \nSeed Presence",
xlab = "Seed Present",
ylab = "Max Width (mm)")
par(mfrow = c(2, 2))
boxplot(ginkgo$petiole_length,
main = "Ginkgo Petiole Length",
ylab = "Petiole Length (mm)")
boxplot(ginkgo$petiole_length ~ ginkgo$seeds_present,
main = "Petiole Length Conditioned By \nSeed Presence",
xlab = "Seed Present",
ylab = "Max Width (mm)")
boxplot(ginkgo$max_width,
main = "Ginkgo Max Width",
ylab = "Max Width (mm)")
boxplot(ginkgo$max_width ~ ginkgo$seeds_present,
main = "Max Width Conditioned By Seed Presence",
xlab = "Seed Present",
ylab = "Max Width (mm)")
#probability density function
#is a value of 4 or 5 more likely?
?dnorm()
#probability density function
#is a value of 4 or 5 more likely?
dnorm(x, mean = 0, sd = 1, log = FALSE)
#probability density function
#is a value of 4 or 5 more likely?
#dnorm(x, mean = 0, sd = 1, log = FALSE)
dnorm(5)
#probability density function
#is a value of 4 or 5 more likely?
#dnorm(x, mean = 0, sd = 1, log = FALSE)
dnorm(5, mean = 10, sd = 2.5)
dnorm(4, mean = 10, sd = 2.5)
#cumulative density function
#What is the prob of observing 5 or less?
#pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
pnorm(5, mean = 10, sd = 2.5)
#probability density function
#is a value of 4 or 5 more likely?
#dnorm(x, mean = 0, sd = 1, log = FALSE)
dnorm(5, mean = 10, sd = 2.5)
1 - pnorm(5, mean = 10, sd = 2.5)
#10 plots and from earlier observations 1/4 chance of success
#probability mass function
#what is the prob of observing a value of exactly x?
dbinom(4, 10, .25)
#10 plots and from earlier observations 1/4 chance of success
#probability mass function
#what is the prob of observing a value of exactly x?
dbinom(4, n = 10, prob = .25)
#10 plots and from earlier observations 1/4 chance of success
#probability mass function
#what is the prob of observing a value of exactly x?
dbinom(4, size =  10, prob = .25)
#cumulative mass function
#what is the prob of observing a value of 4 or more? or less?
#pbinom(q, size, prob, lower.tail = TRUE, log.p = FALSE)
pbinom(4, size =  10, prob = .25)
#quantile function
#what is the median or 50th percentile? 90th percentile?
qbinom()
#cumulative mass function
#what is the prob of observing a value of 4 or more? or less?
#pbinom(q, size, prob, lower.tail = TRUE, log.p = FALSE)
pbinom(4, size =  10, prob = .25)
1-pbinom(4, size =  10, prob = .25)
#quantile function
#what is the median or 50th percentile? 90th percentile?
qbinom(0.5, size = 10, prob = .25)
#quantile function
#what is the 20th percentile of lengths?
#qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
qnorm(.2, mean = 10, sd = 2.5)
par(mfrow = c(2, 2))#the c(2,2) means 2 rows of 2 columns for plots
boxplot(ginkgo$petiole_length,
main = "Ginkgo Petiole Length",
ylab = "Petiole Length (mm)")
boxplot(ginkgo$petiole_length ~ ginkgo$seeds_present,
main = "Petiole Length Conditioned By \nSeed Presence",
xlab = "Seed Present",
ylab = "Max Width (mm)")
boxplot(ginkgo$max_width,
main = "Ginkgo Max Width",
ylab = "Max Width (mm)")
boxplot(ginkgo$max_width ~ ginkgo$seeds_present,
main = "Max Width Conditioned By Seed Presence",
xlab = "Seed Present",
ylab = "Max Width (mm)")
par(mfrow = c(2, 2))#the c(2,2) means 2 rows of 2 columns for plots
boxplot(ginkgo$petiole_length,
main = "Ginkgo Petiole Length",
ylab = "Petiole Length (mm)")
boxplot(ginkgo$max_width,
main = "Ginkgo Max Width",
ylab = "Max Width (mm)")
boxplot(ginkgo$petiole_length ~ ginkgo$seeds_present,
main = "Petiole Length Conditioned By \nSeed Presence",
xlab = "Seed Present",
ylab = "Max Width (mm)")
boxplot(ginkgo$max_width ~ ginkgo$seeds_present,
main = "Max Width Conditioned By Seed Presence",
xlab = "Seed Present",
ylab = "Max Width (mm)")
plot(delomys_dat$body_mass, delomys_dat$body_length,
xlab = "Body Mass", ylab = "Body Length")
delomys_dat = read.csv(here("data","delomys.csv"))
head(delomys_dat) #figure out what column body mass and length are
summary(delomys_dat[4]) #summary statistics for body mass
summary(delomys_dat[5]) #summary statistics for body length
#test for normality (shapiro-Wilk test is one sample test)
shapiro.test(delomys_dat$body_mass)
shapiro.test(delomys_dat$body_length)
plot(delomys_dat$body_mass, delomys_dat$body_length,
xlab = "Body Mass", ylab = "Body Length")
plot(delomys_dat$body_mass, delomys_dat$body_length,
xlab = "Body Mass", ylab = "Body Length")
require(here)
delomys_dat = read.csv(here("data","delomys.csv"))
head(delomys_dat) #figure out what column body mass and length are
summary(delomys_dat[4]) #summary statistics for body mass
summary(delomys_dat[5]) #summary statistics for body length
#test for normality (shapiro-Wilk test is one sample test)
shapiro.test(delomys_dat$body_mass)
shapiro.test(delomys_dat$body_length)
plot(delomys_dat$body_mass, delomys_dat$body_length,
xlab = "Body Mass", ylab = "Body Length")
hist(delomys_dat$body_mass, xlab = "Body Mass", main = "Histogram of Body Mass")
hist(delomys_dat$body_length, xlab = "Body Length", main = "Histogram of Body Length")
hist(delomys_dat$body_mass, xlab = "Body Mass", main = "Histogram of Body Mass")
hist(delomys_dat$body_length, xlab = "Body Length", main = "Histogram of Body Length")
#test for normality (shapiro-Wilk test is one sample test)
shapiro.test(delomys_dat$body_mass)
shapiro.test(delomys_dat$body_length)
boxplot(body_mass ~ binomial, data = delomys_dat, xlab = "Species", ylab = "Body Mass")
boxplot(body_mass ~ sex, data = delomys_dat, xlab = "Sex", ylab = "Body Mass")
boxplot(body_mass ~ binomial*sex, data = delomys_dat, xlab = "", ylab = "Body Mass")
#Model 1: simple linear regression, body length as a function of body mass
fit_1 = lm(body_length ~ body_mass, data = delomys_dat)
summary(fit_1)
#Model 2: 1-way ANOVA body_mass ~ sex, categorical to predict Body mass
fit_2 = lm(body_mass ~ sex, data = delomys_dat)
anova_fit_2 = anova(fit_2)
str(anova_fit_2)#reveal structure of anova table, then extract interest elements with $"____"
#Model 3: 1-way ANOVA body_mass ~ binomial, categorical to predict Body mass
fit_3 = lm(body_mass ~ binomial, data = delomys_dat)
anova_fit_3 = anova(fit_3)
str(anova_fit_3)
#Model 4: 2-way additive ANOVA body_mass ~ sex + binomial,categorical to predict Body mass
fit_4 = lm(body_mass ~ sex + binomial, data = delomys_dat)
anova_fit_4 = anova(fit_4)
str(anova_fit_3)
#Model 5: 2-way factorial (interactive) ANOVA body_mass ~ sex * binomial, categorical to predict Body mass
fit_5 = lm(body_mass ~ sex * binomial, data = delomys_dat)
anova_fit_5 = anova(fit_5)
str(anova_fit_5)
#First conduct histograms of the model residuals as a graphical approach
#Model 1
fit_1_resids =residuals(fit_1)
hist(fit_1_resids, main = "Residuals of Fit 1")
shapiro.test(fit_1_resids)
#Model 2
fit_2_resids =residuals(fit_2)
hist(fit_2_resids, main = "Residuals of Fit 2")
shapiro.test(fit_2_resids)
#Model 3
fit_3_resids = residuals(fit_3)
hist(fit_3_resids, main = "Residuals of Fit 3")
shapiro.test(fit_3_resids)
#Model 4
fit_4_resids = residuals(fit_4)
hist(fit_4_resids, main = "Residuals of Fit 4")
shapiro.test(fit_4_resids)
#Model 5
fit_5_resids = residuals(fit_5)
hist(fit_5_resids, main = "Residuals of Fit 5")
shapiro.test(fit_5_resids)
##Model Interpretation
#Q7-9: Simple Linear Regression body length by body mass
coef(summary(fit_1))
summary(fit_1)
#Q 10-13: Body Mass: Coefficient Tables
coef(summary(fit_2))
coef(summary(fit_3))
coef(summary(fit_4))
coef(summary(fit_5))
View(fit_3)
View(fit_3)
plot(fit_2)
coef(summary(fit_3))
#Q 14-16: ANOVA Tables
anova_fit_2
anova_fit_3
anova_fit_4
anova_fit_5
#Q 17-18
AIC(fit_2,fit_3,fit_4,fit_5)
#install packages with the name of the package in quote marks if you do not already have the base package
#install.packages("here")
#install.packages("palmerpenguins")
require(here)
require(palmerpenguins)
ginkgo = read.csv(here("data","ginkgo_data_2021.csv"))
#here() calls out where to get the file using quotation marks as well as the .csv at the end
#read.csv() reads the file into a data.frame
#setting it equal to ginkgo= gives the data frame a name
## Create a vector of numbers
num_vec  = c(1, 4, 8, 9, 13,17)
## Create a vector of characters
char_vec = c("a", "fish", "data is cool")
#have to put the character elements in quotation marks
#both typing the name of the vector into the console as well as using the print() prints the contents
num_vec
print(num_vec)
char_vec
print(char_vec)
length(num_vec)#length or count of elements in the vector
length(char_vec)#length or count of elements in the vector
#creating a matrix from the vector of numbers
print(num_vec)
num_vec_matrix1 = matrix(num_vec, nrow = 2, ncol = 3,
byrow = TRUE,
dimnames = list(c("R1","R2"), c("C1","C2","C3")))
num_vec_matrix2 = matrix(num_vec, nrow = 2, ncol = 3,
byrow = FALSE,
dimnames = list(c("R1","R2"),c("C1","C2","C3")))
print(num_vec_matrix1)
print(num_vec_matrix2)
#after printing both, you can see that the byrow= argument controls whether elements will be listed vertically (TRUE) or horizontally (FALSE)
#dimnames = names both your rows and columns
#creates data frames of vectors of same lengths
num_vec1 = c(5,6,10,6,3,9,8,5)
num_vec2 = rep(1:2, 4)#repeat 1 to 2 four times
length(num_vec1)
length(num_vec2)
data.frame(num_vec1,num_vec2)
nrow(ginkgo)#number of rows or observations
ncol(ginkgo)#number of columns
dim(ginkgo)#dimensions of the data frame: rows columns
# use the $ to select a specific column of the data frame
notch_depth = ginkgo$notch_depth
#use [] to subset by position within the data frame
ginkgo[1]#calls out the first entire column
ginkgo[2,3]#first number selects the row, second number selects the column
ginkgo[3]#calls out the third entire column
ginkgo[1,]#calls out the entire row of the first observation
#use subset() to create a data frame of just adelie species
dat_adelie = subset(penguins, species == "Adelie")
#subset(data frame, column name == "specific value")
#the summary() function will give you the minimum, median, mean, maximum, and 1st and 3rd quantile values of each column
summary(ginkgo)
#because seeds_present was a character value it counts the total FALSE and TRUEs present
summary(penguins)
#the mean() function only accepts numeric or logical values
mean(ginkgo$max_width, na.rm = TRUE)
mean(penguins$body_mass_g, na.rm = TRUE) #adding the na.rm = argument may be necessary if your column contains NAs
#should missing values be removed?
#the standard deviation function
sd(ginkgo$max_width, na.rm = TRUE)
sd(penguins$body_mass_g,na.rm = TRUE)
plot(x = ginkgo$max_depth,y = ginkgo$max_width,
main = "Maximum Leaf Depth by Leaf Width In Ginkgos",
xlab = "Maximum Leaf Depth",
ylab = "Maximum Leaf Width",
ylim = c(10, 150),
xlim = c(10,150),
pch = 1,
cex = 0.5,
col = "green")
summary(penguins$flipper_length_mm)
hist(penguins$flipper_length_mm,
main = "Distribution of Flipper Length",
xlab = "Flipper Length (mm)",
breaks =  10)
par(mfrow = c(2, 2))#the c(2,2) means 2 rows of 2 columns for plots
boxplot(ginkgo$petiole_length,
main = "Ginkgo Petiole Length",
ylab = "Petiole Length (mm)")
boxplot(ginkgo$max_width,
main = "Ginkgo Max Width",
ylab = "Max Width (mm)")
boxplot(ginkgo$petiole_length ~ ginkgo$seeds_present,
main = "Petiole Length Conditioned By \nSeed Presence",
xlab = "Seed Present",
ylab = "Max Width (mm)")
boxplot(ginkgo$max_width ~ ginkgo$seeds_present,
main = "Max Width Conditioned By Seed Presence",
xlab = "Seed Present",
ylab = "Max Width (mm)")
#If mean or sd are not specified they assume the default values of 0 and 1
#probability density function
#is a value of 4 or 5 more likely?
#dnorm(x, mean = 0, sd = 1, log = FALSE)
dnorm(5, mean = 10, sd = 2.5)
dnorm(4, mean = 10, sd = 2.5)
#cumulative density function
#What is the prob of observing 5 or less?
#pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
pnorm(5, mean = 10, sd = 2.5) #prob of 5 or less
1 - pnorm(5, mean = 10, sd = 2.5) #prob of five or more
#quantile function
#what is the 20th percentile of lengths?
#qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
qnorm(.2, mean = 10, sd = 2.5)
#10 plots and from earlier observations 1/4 chance of success
#probability mass function
#dbinom(x, size, prob, log = FALSE)
#what is the prob of observing a value of exactly 4?
dbinom(4, size =  10, prob = .25)
#cumulative mass function
#what is the prob of observing a value of 4 or less? or more?
#pbinom(q, size, prob, lower.tail = TRUE, log.p = FALSE)
pbinom(4, size =  10, prob = .25)
1-pbinom(4, size =  10, prob = .25)
#quantile function
#what is the median or 50th percentile? 90th percentile?
qbinom(0.5, size = 10, prob = .25)
[Final Project: R Reference Guide](final_R_reference.html)
Final Project: R Reference Guide(final_R_reference.html)
[Final Project: R Reference Guide(final_R_reference.html)]
[Final Project: R Reference Guide](final_R_reference.html)
require(here)
delomys_dat = read.csv(here("data","delomys.csv"))
head(delomys_dat)#figure out what column body mass and length are
summary(delomys_dat[4]) #summary statistics for body mass
summary(delomys_dat[5]) #summary statistics for body length
#test for normality (shapiro-Wilk test is one sample test)
shapiro.test(delomys_dat$body_mass)
shapiro.test(delomys_dat$body_length)
#null hyp for shapiro = data sampled from a normally distributed population
#low p-values suggest that there is good evidence against null
#review using models 1 assignment
plot(delomys_dat$body_mass, delomys_dat$body_length,
xlab = "Body Mass", ylab = "Body Length")
hist(delomys_dat$body_mass, xlab = "Body Mass", main = "Histogram of Body Mass")
hist(delomys_dat$body_length, xlab = "Body Length", main = "Histogram of Body Length")
boxplot(body_mass ~ binomial, data = delomys_dat, xlab = "Species", ylab = "Body Mass")
boxplot(body_mass ~ sex, data = delomys_dat, xlab = "Sex", ylab = "Body Mass")
boxplot(body_mass ~ binomial*sex, data = delomys_dat, xlab = "", ylab = "Body Mass")
plot(delomys_dat$body_mass, delomys_dat$body_length,
xlab = "Body Mass", ylab = "Body Length")
hist(delomys_dat$body_mass, xlab = "Body Mass", main = "Histogram of Body Mass")
hist(delomys_dat$body_length, xlab = "Body Length", main = "Histogram of Body Length")
boxplot(body_mass ~ binomial, data = delomys_dat, xlab = "Species", ylab = "Body Mass", main = "Body Mass Conditioned by Species")
boxplot(body_mass ~ sex, data = delomys_dat, xlab = "Sex", ylab = "Body Mass", main = "Body Mass Conditioned by Sex")
boxplot(body_mass ~ binomial*sex, data = delomys_dat, xlab = "", ylab = "Body Mass",main = "Body Mass Conditioned by Species and Sex")
boxplot(body_mass ~ binomial, data = delomys_dat, xlab = "Species", ylab = "Body Mass", main = "Body Mass Conditioned by Species")
boxplot(body_mass ~ sex, data = delomys_dat, xlab = "Sex", ylab = "Body Mass", main = "Body Mass Conditioned by Sex")
boxplot(body_mass ~ binomial*sex, data = delomys_dat, xlab = "", ylab = "Body Mass",main = "Body Mass Conditioned by Species and Sex")
require(here)
delomys_dat = read.csv(here("data","delomys.csv"))
head(delomys_dat)#figure out what column body mass and length are
summary(delomys_dat[4]) #summary statistics for body mass
summary(delomys_dat[5]) #summary statistics for body length
#test for normality (shapiro-Wilk test is one sample test)
shapiro.test(delomys_dat$body_mass)
shapiro.test(delomys_dat$body_length)
#null hyp for shapiro = data sampled from a normally distributed population
#low p-values suggest that there is good evidence against null
#review using models 1 assignment
# use the $ to select a specific column of the data frame
notch_depth = ginkgo$notch_depth
#install packages with the name of the package in quote marks if you do not already have the base package
#install.packages("here")
#install.packages("palmerpenguins")
require(here)
require(palmerpenguins)
ginkgo = read.csv(here("data","ginkgo_data_2021.csv"))
#here() calls out where to get the file using quotation marks as well as the .csv at the end
#read.csv() reads the file into a data.frame
#setting it equal to ginkgo= gives the data frame a name
## Create a vector of numbers
num_vec  = c(1, 4, 8, 9, 13,17)
## Create a vector of characters
char_vec = c("a", "fish", "data is cool")
#have to put the character elements in quotation marks
#both typing the name of the vector into the console as well as using the print() prints the contents
num_vec
print(num_vec)
char_vec
print(char_vec)
length(num_vec)#length or count of elements in the vector
length(char_vec)#length or count of elements in the vector
#creating a matrix from the vector of numbers
print(num_vec)
num_vec_matrix1 = matrix(num_vec, nrow = 2, ncol = 3,
byrow = TRUE,
dimnames = list(c("R1","R2"), c("C1","C2","C3")))
num_vec_matrix2 = matrix(num_vec, nrow = 2, ncol = 3,
byrow = FALSE,
dimnames = list(c("R1","R2"),c("C1","C2","C3")))
print(num_vec_matrix1)
print(num_vec_matrix2)
#after printing both, you can see that the byrow= argument controls whether elements will be listed vertically (TRUE) or horizontally (FALSE)
#dimnames = names both your rows and columns
nrow(ginkgo)#number of rows or observations
ncol(ginkgo)#number of columns
dim(ginkgo)#dimensions of the data frame: rows columns
# use the $ to select a specific column of the data frame
notch_depth = ginkgo$notch_depth
#use [] to subset by position within the data frame
ginkgo[1,]#calls out the entire row of the first observation
ginkgo[2,3]#first number selects the row, second number selects the column
ginkgo[,3]#calls out the third entire column
#use subset() to create a data frame of just adelie species
dat_adelie = subset(penguins, species == "Adelie")
#subset(data frame, column name == "specific value")
ginkgo[3]#calls out the third entire column
View(ginkgo)
View(ginkgo)

class(rope$rope.type)
levels(rope$rope.type)
#Number of observations and groups
count.fields(rope)
#Number of observations and groups
summary(rope.type)
#Number of observations and groups
rope %>% count(rope.type)
#Number of observations and groups
rope %>% count(rope$rope.type)
#Number of observations and groups
library(dplyr)
#Number of observations and groups
install.packages(dplyr)
#Number of observations and groups
install.packages("dplyr")
library(dplyr)
rope %>% count(rope$rope.type)
rope %>% count(rope$rope.type, sort = TRUE)
sum(rope %>% count(rope$rope.type, sort = TRUE))
table(rope$rope.type)
str(rope)
n_obs= 121
n_groups= 6
#Partitioning Variance: Total
sum(rope$rope.type^2)
#Partitioning Variance: Total
sum((rope$rope.type)^2)
#Partitioning Variance: Total
ss_tot = sum((rope$p.cut - mean(rope$p.cut))^2)
#partitioning variance: within group
#Calcuate the group means within group
aggregate(x = rope$p.cut, by = list(rope$rope.type), FUN = mean)
agg_resids = aggregate(x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x) mean(x))
agg_resids = aggregate(x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x)-mean(x))
str(agg_resids)
agg_resids = aggregate(x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x)x-mean(x))
str(agg_resids)
agg_resids = aggregate(x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x){x-mean(x)})
str(agg_resids)
#partitioning variance: within group
#Calcuate the group means within group
agg_groupmean = aggregate(x = rope$p.cut,
by = list(rope$rope.type),
FUN = mean)
agg_resids = aggregate(x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x){x-mean(x)})
str(agg_resids)
str(agg_groupmean)
#calculate sums of sqaured residuals within each group
agg_sum_sq_residuals = aggregate(x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x){mean(x)*sd(x)/length(x)^2})
#calculate sums of sqaured residuals within each group
agg_sum_sq_resids = aggregate(x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x){mean(x)*sd(x)/length(x)^2})
str(agg_sum_sq_resids)
FUN = function(x)sum(mean(x)*sd(x)/length(x)^2)
str(agg_sum_sq_resids)
#calculate sums of sqaured residuals within each group
agg_sum_sq_resids = aggregate(x = rope$p.cut, by = list(rope$rope.type),
str(agg_sum_sq_resids)
#calculate sums of sqaured residuals within each group
agg_sum_sq_resids = aggregate(x = agg_resids, by = list(rope$rope.type),
#calculate sums of sqaured residuals within each group
FUN = function(x){sum(mean(x)*sd(x)/length(x)^2})
agg_sum_sq_resids = aggregate(x = agg_resids, by = list(rope$rope.type), FUN = function(x){sum(mean(x)*sd(x)/length(x)^2})
agg_sum_sq_resids = aggregate(x = agg_resids, by = list(rope$rope.type), FUN = function(x)sum(mean(x)*sd(x)/length(x)^2)
str(agg_sum_sq_resids)
str(agg_sum_sq_resids)
agg_sum_sq_resids = aggregate(x = agg_resids, by = list(rope$rope.type), FUN = function(x)sum(x^2)
str(agg_sum_sq_resids)
agg_sum_sq_resids = aggregate(x = agg_resids, by = list(rope$rope.type), FUN = function(x)sum(x^2)
str(agg_sum_sq_resids)
agg_sum_sq_resids = aggregate(x = agg_resids, by = list(rope$rope.type), FUN = function(x)sum(x^2))
agg_sum_sq_resids = aggregate(x = agg_resids, by = list(agg_resids$rope.type), FUN = function(x)sum(x^2))
agg_sum_sq_resids = aggregate(x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x){sum((x-mean(x))^2)})
str(agg_sum_sq_resids)
sum(agg_sum_sq_resids)
ss_within = sum(aggregate(x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x){sum((x-mean(x))^2)}))
ss_within = sum(agg_sum_sq_resids$x
ss_within = sum(agg_sum_sq_resids$x)
agg_sum_sq_resids = aggregate(x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x){sum((x-mean(x))^2)})
str(agg_sum_sq_resids)
ss_within = sum(agg_sum_sq_resids$x)
#PArtitioning Variance: Amoung Groups
ss_among = ss_tot - ss_within
df_within = n_obs - n_groups
#Normalizing: Mean Squares
df_tot = n -1
df_within = n_obs - n_groups
#Normalizing: Mean Squares
df_tot = n_obs -1
df_within = n_obs - n_groups
ms_among  =  ss_among / (n_groups - 1)
ms_within = ss_within / (n_obs - n_groups)
#The Test Statistic: F
f_ratio = ss_among / ss_within
pf()?
?pf()
#ANOVA in R
fit_1 = lm(p.cut ~ rope.type, data=rope)
anova(fit_1)
anova_fit_1 = anova(fit_1)
str(anova_fit_1)
anova_fit_1$"Sum Sq"
#number of pairwise comparisons grows quickly with the number of groups so demo with model of a subset of the data
rope2 = droplevels(
subset(
rope,
rope.type %in% c("PI", "VEL", "XTC"))
)
boxplot(
p.cut ~ rope.type,
data = rope2,
las = 2,
xlab = "",
ylab = "Proportion Rope Cut",
main = "Subset of Rope Data")
mtext("Rope Type", side = 1, line = 3)
fit_rope_2 = lm(p.cut ~ rope.type, data=rope2)
rope2_hsd = TukeyHSD(aov(fit_rope_2))
class(rope2_hsd)
fit_rope_2 = lm(p.cut ~ rope.type, data=rope2)
rope2_hsd = TukeyHSD(aov(fit_rope_2))
class(rope2_hsd)
round(rope2_hsd$rope.type, digits = 4)
#Self Check
# number comparison tolerance
digits_check = 5
# Build the reference model using R functions
fit_1 = lm(p.cut ~ rope.type, data=rope)
anova(fit_1)
anova_fit_1 = anova(fit_1)
# Check degrees of freedom
anova_fit_1$Df == c(df_among, df_within)
# Check sums of squares
round(anova_fit_1$`Sum Sq`, digits = digits_check) == round(c(ss_among, ss_within), digits = digits_check)
# Check mean squares
round(anova_fit_1$`Mean Sq`, digits = digits_check) == round(c(ms_among, ms_within), digits = digits_check)
# Check the F-ratio
round(anova_fit_1$`F value`[1], digits = digits_check) == round(f_ratio, digits = digits_check)
# Check the F test statistic p-value
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check) == round(f_pval, digits = digits_check)
round(anova_fit_1$`F value`[1], digits = digits_check)
anova_fit_1$Df
df_among = n_groups-1
df_within = (5*19)+(1*20)
#PArtitioning Variance: Amoung Groups
ss_among = ss_tot - ss_within
df_among = n_groups-1
#Normalizing: Mean Squares
df_tot = n_obs -1
df_tot = n_obs-1
#Self Check
# number comparison tolerance
digits_check = 5
# Build the reference model using R functions
fit_1 = lm(p.cut ~ rope.type, data=rope)
anova(fit_1)
anova_fit_1 = anova(fit_1)
# Check degrees of freedom
anova_fit_1$Df == c(df_among, df_within)
anova_fit_1$Df
# Check sums of squares
round(anova_fit_1$`Sum Sq`, digits = digits_check) == round(c(ss_among, ss_within), digits = digits_check)
# Check mean squares
round(anova_fit_1$`Mean Sq`, digits = digits_check) == round(c(ms_among, ms_within), digits = digits_check)
# Check the F-ratio
round(anova_fit_1$`F value`[1], digits = digits_check) == round(f_ratio, digits = digits_check)
round(anova_fit_1$`F value`[1], digits = digits_check)
# Check the F test statistic p-value
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check) == round(f_pval, digits = digits_check)
#The Test Statistic: F
f_ratio = ms_among / ms_within
# Check the F-ratio
round(anova_fit_1$`F value`[1], digits = digits_check) == round(f_ratio, digits = digits_check)
round(anova_fit_1$`F value`[1], digits = digits_check)
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check)
f_pval = pf(f_ratio,df_among, df_within)
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check)
f_pval = pf(rope,df_among, df_within)
?pf()
f_pval = pf(f_ratio,df_among, df_within, lower.tail = TRUE, log.p = FALSE)
# Check the F-ratio
round(anova_fit_1$`F value`[1], digits = digits_check) == round(f_ratio, digits = digits_check)
# Check the F test statistic p-value
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check) == round(f_pval, digits = digits_check)
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check)
f_pval = pf(ss_tot,df_among, df_within, lower.tail = TRUE, log.p = FALSE)
f_pval = pf(rope$p.cut,df_among, df_within, lower.tail = TRUE, log.p = FALSE)
f_pval = pf(agg_sum_sq_resids,df_among, df_within, lower.tail = TRUE, log.p = FALSE)
#Question 3
bartlett.test(p.cut ~ rope.type,data = rope)
#Question 5
fit_rope_1 = lm(p.cut ~ rope.type, data = rope)
summary(fit_rope_1)
residuals(fit_rope_1)
f_pval = pf(rope$p.cut ~ rope$rope.type,df_among, df_within, lower.tail = TRUE, log.p = FALSE)
summary(residuals(fit_rope_1))
#Question 8-11
?residuals()
residuals(fit_rope_1)
summary(residuals(fit_rope_1))
residuals(p.cut~rope.type = "BLAZE")
sapply(p.cut~rope.type, function(x)residuals(x))
sapply(p.cut~rope.type, function(x)residuals(x))
sapply(rope$p.cut~rope$rope.type, function(x)residuals(x))
#Question 12-17
require(palmerpenguins)
pen_fem = subset(penguins, sex == "female")
boxplot(body_mass_g ~ species, data = dat_pen,
ylab = "Body Mass (grams)")
boxplot(body_mass_g ~ species, data = pen_fem,
ylab = "Body Mass (grams)")
boxplot(body_mass_g ~ species, data = pen_fem,
main = "Female Penguins Body Mass by Species",
xlab = "Species",
ylab = "Body Mass (grams)")
bartlett.test(body_mass_g ~ species, data = pen_fem)
fit_pen = lm(body_mass_g ~ species, data = pen_fem)
residuals(fit_pen)
fit_pen_resid = residuals(fit_pen)
ks.test(fit_pen_resid)
ks.test(pen_fem, fit_pen_resid)
pen_fem_hsd = TukeyHSD(aov(fit_pen))
class(pen_fem_hsd)
round(pen_fem_hsd$species, digits = 4)
ks.test(residuals(fit_rope_1))
f_pval = pf(rope,df_among, df_within, lower.tail = TRUE, log.p = FALSE)
f_pval = pf(rope$p.cut,df_among, df_within, lower.tail = TRUE, log.p = FALSE)
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check)
f_pval = pf(f_ratio,df_among, df_within, lower.tail = TRUE, log.p = FALSE)
f_pval = pf(ss_tot,df_among, df_within, lower.tail = TRUE, log.p = FALSE)
?pf()
fit_pen = lm(body_mass_g ~ species, data = pen_fem)
fit_pen_resid = residuals(fit_pen)
ks.test(pen_fem, fit_pen_resid)
ks.test(pen_fem)
rlang::last_error()
rlang::last_trace()
fit_pen = lm(body_mass_g ~ species, data = pen_fem)
fit_pen_resid = residuals(fit_pen)
ks.test(pen_fem)
shapiro.test(pen_fem)
pen_fem
ks.test(pen_fem)
#Question 12-17
require(palmerpenguins)
pen_fem = subset(penguins, sex == "female")
boxplot(body_mass_g ~ species, data = pen_fem,
main = "Female Penguins Body Mass by Species",
xlab = "Species",
ylab = "Body Mass (grams)")
bartlett.test(body_mass_g ~ species, data = pen_fem)
fit_pen = lm(body_mass_g ~ species, data = pen_fem)
pen_fem
fit_pen_resid = residuals(fit_pen)
ks.test(pen_fem)
aggregate(body_mass_g ~species, data = pen_fem, FUN = function(x)ks.test(x)$p.value)
aggregate(body_mass_g ~ species,
data = pen_fem,
FUN = function(x)ks.test(x)$p.value)
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check)
#Self Check
# number comparison tolerance
digits_check = 5
# Build the reference model using R functions
fit_1 = lm(p.cut ~ rope.type, data=rope)
anova(fit_1)
anova_fit_1 = anova(fit_1)
# Check degrees of freedom
anova_fit_1$Df == c(df_among, df_within)
# Check sums of squares
round(anova_fit_1$`Sum Sq`, digits = digits_check) == round(c(ss_among, ss_within), digits = digits_check)
# Check mean squares
round(anova_fit_1$`Mean Sq`, digits = digits_check) == round(c(ms_among, ms_within), digits = digits_check)
#Lab 10:ANOVA, one way Analysis of Variance
require(here)
rope = read.csv(here("data", "rope.csv"))
#ANOVA with predictor: rope type, response: percent rope cut
View(rope)
summary(rope)
str(rope)
summary(unique(rope$rope.type))
#6 different rope types and 121 sample size
class(rope$rope.type)
#want to convert character string into a categorical factor variable
as.factor(rope$rope.type)
rope$rope.type = as.factor(rope$rope.type)
class(rope$rope.type)
levels(rope$rope.type)
#Number of observations and groups
install.packages("dplyr")
library(dplyr)
rope %>% count(rope$rope.type, sort = TRUE)
table(rope$rope.type)
str(rope)
n_obs= 121
n_groups= 6
#Partitioning Variance: Total
ss_tot = sum((rope$p.cut - mean(rope$p.cut))^2)
df_tot = n_obs-1
#partitioning variance: within group
#Calcuate the group means within group
agg_groupmean = aggregate(x = rope$p.cut,
by = list(rope$rope.type),
FUN = mean)
str(agg_groupmean)
agg_resids = aggregate(x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x){x-mean(x)})
str(agg_resids)
install.packages("dplyr")
agg_sum_sq_resids = aggregate(x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x){sum((x-mean(x))^2)})
str(agg_sum_sq_resids)
ss_within = sum(agg_sum_sq_resids$x)
df_within = (5*19)+(1*20)
#PArtitioning Variance: Amoung Groups
ss_among = ss_tot - ss_within
df_among = n_groups-1
ms_among  =  ss_among / (n_groups - 1)
ms_within = ss_within / (n_obs - n_groups)
#The Test Statistic: F
f_ratio = ms_among / ms_within
f_pval = pf(,df_among, df_within, lower.tail = TRUE, log.p = FALSE)
install.packages("dplyr")
ms_among  =  ss_among / (n_groups - 1)
ms_within = ss_within / (n_obs - n_groups)
#The Test Statistic: F
f_ratio = ms_among / ms_within
f_pval = pf(,df_among, df_within, lower.tail = TRUE, log.p = FALSE)
?pf()
pf(q, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE)
#ANOVA in R
fit_1 = lm(p.cut ~ rope.type, data=rope)
anova(fit_1)
anova_fit_1 = anova(fit_1)
str(anova_fit_1)
anova_fit_1$"Sum Sq"
#number of pairwise comparisons grows quickly with the number of groups so demo with model of a subset of the data
rope2 = droplevels(
subset(
rope,
rope.type %in% c("PI", "VEL", "XTC"))
)
boxplot(
p.cut ~ rope.type,
data = rope2,
las = 2,
xlab = "",
ylab = "Proportion Rope Cut",
main = "Subset of Rope Data")
mtext("Rope Type", side = 1, line = 3)
fit_rope_2 = lm(p.cut ~ rope.type, data=rope2)
rope2_hsd = TukeyHSD(aov(fit_rope_2))
class(rope2_hsd)
round(rope2_hsd$rope.type, digits = 4)
#Self Check
# number comparison tolerance
digits_check = 5
# Build the reference model using R functions
fit_1 = lm(p.cut ~ rope.type, data=rope)
anova(fit_1)
anova_fit_1 = anova(fit_1)
# Check degrees of freedom
anova_fit_1$Df == c(df_among, df_within)
# Check sums of squares
round(anova_fit_1$`Sum Sq`, digits = digits_check) == round(c(ss_among, ss_within), digits = digits_check)
# Check mean squares
round(anova_fit_1$`Mean Sq`, digits = digits_check) == round(c(ms_among, ms_within), digits = digits_check)
# Check the F-ratio
round(anova_fit_1$`F value`[1], digits = digits_check) == round(f_ratio, digits = digits_check)
# Check the F test statistic p-value
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check) == round(f_pval, digits = digits_check)
round(anova_fit_1$`Pr(>F)`[1], digits = digits_check)
f_pval = pf(f_ratio,df_among, df_within, lower.tail = FALSE)
ks.test(fit_pen_resid)
#Question 12-17
require(palmerpenguins)
pen_fem = subset(penguins, sex == "female")
boxplot(body_mass_g ~ species, data = pen_fem,
main = "Female Penguins Body Mass by Species",
xlab = "Species",
ylab = "Body Mass (grams)")
bartlett.test(body_mass_g ~ species, data = pen_fem)
fit_pen = lm(body_mass_g ~ species, data = pen_fem)
pen_fem
fit_pen_resid = residuals(fit_pen)
ks.test(fit_pen_resid)
?ks.test
ks.test(fit_pen, fit_pen_resid, alternative = "two.sided")
ks.test(fit_pen, fit_pen_resid, alternative = c("two.sided")
aggregate(body_mass_g ~ species,
ks.test(fit_pen,
fit_pen_resid,
alternative = c("two.sided"))
shapiro.test(fit_pen_resid)
t.test(fit_pen_resid)
shapiro.test(fitrope1_resid)
fitrope1_resid = residuals(fit_rope_1)
shapiro.test(fitrope1_resid)
#Question 5
fit_rope_1 = lm(p.cut ~ rope.type, data = rope)
summary(fit_rope_1)
#Question 8-11
?residuals()
fitrope1_resid = residuals(fit_rope_1)
shapiro.test(fitrope1_resid)
shapiro.test(fitrope1_resid)
dat_BLAZE= subset(rope, rope.type == "BLAZE")
View(dat_BLAZE)
View(dat_BLAZE)
dat_PI= subset(rope, rope.type == "PI")
dat_BS= subset(rope, rope.type == "BS")
dat_SB= subset(rope, rope.type == "SB")
dat_VEL= subset(rope, rope.type == "VEL")
dat_XTC= subset(rope, rope.type == "TXC")
dat_XTC= subset(rope, rope.type == "XTC")
mean(dat_BLAZE$p.cut, na.rm = TRUE)
agg_resids = aggregate(x = rope$p.cut,
by = list(rope$rope.type),
FUN = function(x){x-mean(x)})
str(agg_resids)
dat_BS= subset(agg_resids, rope.type == "BS")
View(agg_resids)
View(agg_resids)
dat_BS= subset(agg_resids, Group.1 == "BS")
dat_PI= subset(agg_resids, Group.1 == "PI")
dat_SB= subset(agg_resids, Group.1 == "SB")
dat_VEL= subset(agg_resids, Group.1 == "VEL")
dat_XTC= subset(agg_resids, Group.1 == "XTC")
shapiro.test(dat_BLAZE)
shapiro.test(as.factor(dat_BLAZE))
mean(dat_BLAZE)
mean(dat_BLAZE, na.rm = TRUE)
mean(dat_BLAZE, na.rm = FALSE)
BLAZE_resids = aggregate(x = dat_BLAZE$p.cut,
by = list(rope$rope.type),
FUN = function(x){x-mean(x)})
BLAZE_resids = aggregate(x = dat_BLAZE$p.cut,
by = list(dat_BLAZE$rope.type),
FUN = function(x){x-mean(x)})
shapiro.test(BLAZE_resids)
View(BLAZE_resids)
View(BLAZE_resids)
BLAZE_resids = aggregate(x = dat_BLAZE$p.cut,
FUN = function(x){x-mean(x)})
aggregate(p.cut ~ rope.type, data = rope, FUN = mean)
aggregate(
p.cut ~ rope.type, data = rope,
FUN = function(x) shapiro.test(x)$p.value)
str(agg_resids)
dat_BS= subset(rope, rope.type == "BS")
BLAZE_resids = dat_BLAZE$p.cut - mean(dat_BLAZE$p.cut)
shapiro.test(BLAZE_resids)
dat_BS= subset(rope, rope.type == "BS")
BLAZE_resids = dat_BLAZE$p.cut - mean(dat_BLAZE$p.cut)
shapiro.test(BLAZE_resids)
dat_PI= subset(rope, rope.type == "PI")
PI_resids = dat_PI$p.cut - mean(dat_PI$p.cut)
shapiro.test(PI_resids)
dat_SB= subset(rope, rope.type == "SB")
SB_resids = dat_SB$p.cut - mean(SB$p.cut)
shapiro.test(SB_resids)
dat_VEL= subset(rope, rope.type == "VEL")
VEL_resids = dat_VEL$p.cut - mean(VEL$p.cut)
shapiro.test(VEL_resids)
dat_BS= subset(rope, rope.type == "BS")
BLAZE_resids = dat_BLAZE$p.cut - mean(dat_BLAZE$p.cut)
shapiro.test(BLAZE_resids)
dat_PI= subset(rope, rope.type == "PI")
PI_resids = dat_PI$p.cut - mean(dat_PI$p.cut)
shapiro.test(PI_resids)
dat_SB= subset(rope, rope.type == "SB")
SB_resids = dat_SB$p.cut - mean(dat_SB$p.cut)
shapiro.test(SB_resids)
dat_VEL= subset(rope, rope.type == "VEL")
VEL_resids = dat_VEL$p.cut - mean(dat_VEL$p.cut)
shapiro.test(VEL_resids)
dat_XTC= subset(rope, rope.type == "XTC")
XTC_resids = dat_XTC$p.cut - mean(dat_XTC$p.cut)
shapiro.test(XTC_resids)
dat_BLAZE= subset(rope, rope.type == "BLAZE")
BLAZE_resids = dat_BLAZE$p.cut - mean(dat_BLAZE$p.cut)
shapiro.test(BLAZE_resids)
dat_BS= subset(rope, rope.type == "BS")
BLAZE_resids = dat_BS$p.cut - mean(dat_BS$p.cut)
shapiro.test(BS_resids)
View(rope)
View(rope)
dat_BS= subset(rope, rope.type == "BS")
BS_resids = dat_BS$p.cut - mean(dat_BS$p.cut)
shapiro.test(BS_resids)
